name: CI-CD

# Main 브랜치에 push를 하였을 때 
on:
  push:
    branches:
      - main
      
## 이전에 만들었던 S3, DEPLOY_NAME, GROUP_NAME을 ENV로 따로 변수로 설정을 합니다.
## RESOURCE_PATH는 현재 프로젝트가 멀티모듈로 구성이 되어서 모놀리직 구조이면 module-api를 삭제하고
## 적용을 하면 됩니다.
env:
  S3_BUCKET_NAME: s3-cstudy
  RESOURCE_PATH: ./module-api/src/main/resources/application.yml
  CODE_DEPLOY_APPLICATION_NAME: CODE-DEPLOY-CSTUDY
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: CODE-DEPLOY-CSTUDY-GROUP

jobs:
  build:
  	# 어떤 OS에 실행이 되는지
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

		# JDK 설치
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11


## Git Action이 실행이 되면서 동적으로 application.yml에 변수로 주입을 합니다.
## 해당 변수는 Github Setting에서 설정을 할 수 있습니다.
## 밑에 사진으로 설명을 하겠습니다.
      - name: Set yaml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          spring.data.mongodb.uri: ${{ secrets.MONGODB_URL }}
          spring.redis.host: ${{ secrets.REDIS_HOST }}

          spring.datasource.url: ${{ secrets.MYSQL_URL }}
          spring.datasource.username: ${{ secrets.MYSQL_USERNAME }}
          spring.datasource.password: ${{ secrets.MYSQL_PASSWD }}

          spring.mail.username: ${{ secrets.MAIL_USERNAME }}
          spring.mail.password: ${{ secrets.MAIL_PASSWORD }}


          spring.security.oauth2.client.registration.google.client-id: ${{ secrets.GOOGLE_CLIENT_ID }}
          spring.security.oauth2.client.registration.google.client-secret: ${{ secrets.GOOGLE_SECRET }}

          spring.security.oauth2.client.registration.naver.client-id: ${{ secrets.NAVER_CLIENT_ID }}
          spring.security.oauth2.client.registration.naver.client-secret: ${{ secrets.NAVER_SECRET }}

          spring.security.oauth2.client.registration.kakao.client-id: ${{ secrets.KAKAO_CLIENT_ID }}

          jwt.secretKey: ${{ secrets.JWT_SECRET_KEY }}
          jwt.refreshKey: ${{ secrets.JWT_REFRESH_KEY }}

          cloud.aws.credentials.accessKey: ${{ secrets.AWS_CREDENTIALS_ACCESS_KEY }}
          cloud.aws.credentials.secretKey: ${{ secrets.AWS_CREDENTIALS_SECRET_KEY }}

          cloud.aws.s3.bucket: ${{ secrets.S3_BUCKET }}
          cloud.aws.region.static: ${{ secrets.AWS_REGION }}

		## 권한을 주는 명령어
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

		## build를 하는 명령어
        ## 모놀리직 구조는 gradle build -x test
      - name: Build with Gradle
        run: ./gradlew clean :module-api:buildNeeded --stacktrace --info --refresh-dependencies -x test
        shell: bash
		
        ## Zip 파일 생성: 프로젝트를 압축하여 zip 파일 생성.
      - name: Make zip file
        run: zip -r ./$GITHUB_SHA .
        shell: bash
		
        ## AWS 자격 증명 구성: AWS 자격 증명 설정.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
		
        ## S3에 업로드: 생성된 zip 파일을 S3 버킷에 업로드.
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip
		
        ## Code Deploy: AWS CodeDeploy에 배포 생성.
      - name: Code Deploy
        run: |
          aws deploy create-deployment \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip
